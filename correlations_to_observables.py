"""Extracts the experimental expectation values of linear, quadratic, cubic
    and quartic graphs. Calculates the theoretical expectation value
    equivalent and computes the ratio."""

from __future__ import division
import numpy as np
import shelve
import sys
from scipy.optimize import fsolve
from numpy import sqrt as sqrt


def calc_obs_vals():
    """Calculate experimental observable values and standard deviatios from
    user specified correlation matrix ensemble file."""

    while True:
        try:
            D = input("Enter the dimension of the matrices: ")
            D = int(D)
            break
        except ValueError:
            print("Please select an integer value for the dimension")

    fname = input("Enter the name of the shelve file: ")

    # Opening the matrix data shelve to read in the data
    ts = shelve.open(fname, flag="r", protocol=2)
    dic_key = ts.keys()
    M = np.zeros((35, len(dic_key)))

    # Iterating over all matrices, and calculating the values of the obs
    for widx, k in enumerate(dic_key):
        sys.stdout.write(f" Dimension: {D}, Matrix number: {widx+1}")
        sys.stdout.flush()

        W = ts[k]

        # Linear term
        # \ sum_{i,j} W_{ij})
        M[0, widx] = np.sum(W)

        # Quadratic terms
        W1 = W**2
        # \sum_{i,j} W_{ij}^2
        M[1, widx] = np.sum(W1)
        W2 = np.dot(W, W)
        # \sum_{i,j,k} W_{ij} W_{jk}
        M[2, widx] = np.sum(W2)
        # \sum_{i,j,k,l} W_{ij} W_{kl}
        M[3, widx] = np.sum(W) ** 2

        # Cubic terms
        # 2 vertex
        W3 = W**3
        # \sum_{i,j} W_{ij}^3
        M[4, widx] = np.sum(W3)

        # 3 vertex
        W4 = np.dot(W1, W)
        # \sum_{i,j,k} W_{ij}^2 W_{jk}
        M[5, widx] = np.sum(W4)
        W5 = np.dot(W, W2)
        # \sum_{i,j,k} W_{ij} W_{jk} W_{ki}
        M[6, widx] = np.trace(W5)

        # 4 vertex
        # \sum_{i,j,k,l} W_{ij}^2 W_{kl}
        M[7, widx] = np.sum(W1) * np.sum(W)
        # \sum_{i,j,k,l} W_{ij} W_{jk} W_{kl}
        M[8, widx] = np.sum(W5)
        # \sum_{i,j,k,l} W_{ij} W_{ik} W_{il}
        M[9, widx] = np.sum(W.sum(axis=0) ** 3)

        # 5 vertex
        # \sum_{i,j,k,l,m} W_{ij} W_{jk} W_{lm}
        M[10, widx] = np.sum(W2) * np.sum(W)

        # 6 vertex
        # \sum_{i,j,k,l,m,n} W_{ij} W_{kl} W_{mn}
        M[11, widx] = (np.sum(W) ** 3)

        # Quartic terms
        # 2 vertex
        W6 = W**4
        # \sum_{i,j} W_{ij}^4
        M[12, widx] = np.sum(W6)

        # 3 vertex
        # \sum_{i,j,k} W_{ij}^2 W_{jk}^2
        M[13, widx] = np.sum(np.dot(W1, W1))
        W7 = np.dot(W3, W)
        # \sum_{i,j,k} W_{ij} W_{jk}^3
        M[14, widx] = np.sum(W7)
        # \sum_{i,j,k} W_{ij} W_{ik} W_{jk}^2
        M[15, widx] = np.sum(W2 * W * W)

        # 4 vertex
        # \sum_{i,j,k,l} W_{ij} W_{kj} W_{lj}^2
        M[16, widx] = np.sum(W1.sum(axis=0) * (W.sum(axis=0) ** 2))
        # \sum_{i,j,k,l} W_{ij} W_{kl}^3
        M[17, widx] = np.sum(W) * np.sum(W3)
        # \sum_{i,j,k,l} W_{ij} W_{jk}^2 W_{kl}
        M[18, widx] = np.sum(np.dot(W, W4))
        # \sum_{i,j,k,l} W_{ij} W_{jk} W_{kl}^2
        M[19, widx] = np.sum(np.dot(W1, W2))
        # \sum_{i,j,k,l} W_{ij} W_{jk} W_{ik} W_{kl}
        M20 = 0
        for i in range(D):
            for j in range(D):
                for k in range(D):
                    for l in range(D):
                        M20 += (W[i, j] * W[j, k] * W[i, k] * W[k, l])
        M[20, widx] = M20
        # \sum_{i,j,k,l} W_{ij}^2 W_{kl}^2
        M[21, widx] = np.sum(W1) * np.sum(W1)
        W8 = np.dot(W5, W)
        # \sum_{i,j,k,l} W_{ij} W_{jk} W_{kl} W_{li}
        M[22, widx] = np.trace(W8)

        # 5 vertex
        # \sum_{i,j,k,l, m} W_{ik} W_{jk} W_{lk} W_{mk}
        M[23, widx] = np.sum(W.sum(axis=0) ** 4)
        # \sum_{i,j,k,l, m} W_{il} W_{jk} W_{lk} W_{mk}
        M[24, widx] = np.sum(W2.sum(axis=0) * (W.sum(axis=0) ** 2))
        # \sum_{i,j,k,l, m} W_{ij} W_{kl} W_{lm} W_{mk}
        M[25, widx] = np.sum(W) * np.trace(W5)
        # \sum_{i,j,k,l, m} W_{ij}^2 W_{kl} W_{lm}
        M[26, widx] = np.sum(W1) * np.sum(W2)
        # \sum_{i,j,k,l, m} W_{ij} W_{kl} W_{lm}^2
        M[27, widx] = np.sum(W) * np.sum(W4)
        # \sum_{i,j,k,l,m} W_{ij} W_{jk} W_{kl} W_{lm}
        M[28, widx] = np.sum(np.dot(W2, W2))

        # 6 vertex
        # \sum_{i,j,k,l,m,n} W_{ij} W_{kl} W_{km} W_{kn}
        M[29, widx] = np.sum(W) * np.sum(W.sum(axis=0) ** 3)
        # \sum_{i,j,k,l,m,n} W_{ij} W_{jk} W_{lm} W_{ln}
        M[30, widx] = (np.sum(W2) ** 2)
        # \sum_{i,j,k,l,m,n} W_{ij}^2 W_{kl} W_{mn}
        M[31, widx] = (np.sum(W1) * np.sum(W) * np.sum(W))
        # \sum_{i,j,k,l,m,n} W_{ij} W_{kl} W_{lm} W_{mn}
        M[32, widx] = np.sum(W) * np.sum(W5)

        # 7 vertex
        # \sum_{i,j,k,l,m,n,o} W_{ij} W_{jk} W_{lm} W_{no}
        M[33, widx] = np.sum(W2) * (np.sum(W) ** 2)

        # 8 vertex
        # \sum_{i,j,k,l,m,n,o,p} W_{ij} W_{kl} W_{mn} W_{op}
        M[34, widx] = (np.sum(W) ** 4)

    ts.close()

    # M1 holds the expectation values corresponding to each matrix sum
    M1 = np.mean(M, axis=1)

    # obs_std holds the standard deviation corresponding to each matrix sum
    obs_std = np.std(M, axis=1)

    # Setting these expectation values as a list
    exp_list = []
    for k in range(M1.shape[0]):
        exp_list.append(M1[k])

    # Setting the standard deviations values as a list
    std_list = []
    for k in range(obs_std.shape[0]):
        std_list.append(obs_std[k])

    return D, exp_list[0:4], exp_list[4:35], std_list[0:4], std_list[4:35]


def calc_model_params(mat_exp, D):
    """Calculates the one linear and 3 quadratic parameters of the model."""
    # Write the linear and quadratic expectation values as a system of linear equations
    def f(y):
        # <sum_{i,j} M_{ij}>
        f1 = np.sqrt(D*(D-1))*y[0] - float(mat_exp[0])
        # <sum_{i,j} M_ij M_ij>
        f2 = y[0]**2 + y[1] + (D-1)*y[2] + (D*(D-3)/2)*y[3] - float(mat_exp[1])
        # <sum_{i,j,k} M_ij M_jk>
        f3 = (D-1)*(y[0]**2) + (D-1)*y[1] + ((D-1)*(D-2)/2)*y[2] - float(mat_exp[2])
        # <sum_{i,j,k,l} M_ij M_kl>
        f4 = D*(D-1)*(y[0]**2) + D*(D-1)*y[1] - float(mat_exp[3])
        return [f1, f2, f3, f4]

    x_couplings = fsolve(f, [0, 0, 0, 0])

    opt_check = np.isclose(f(x_couplings), [0, 0, 0, 0])
    for p in opt_check:
        if not p:
            print("\n Parameter optimisation: Unsuccessful, fsolve procedure has failed.")
            sys.exit()
        else:
            continue
    print("\n Parameter optimisation: Successful")

    print(" \n Parameter results at dimension " + str(D) + ":")
    print(x_couplings)

    return x_couplings


def obs_theory(x, D):
    """Calculates theoretical expectation values of observables."""
    g = np.zeros(31)

    # Cubic
    # G1: \sum_{i,j} W_{ij}^3
    g[0] = 1.0*x[0]*(1.5*D**6*x[3]*sqrt((D - 1)/D**3) - 6.0*D**5*x[3]*sqrt((D - 1)/D**3)
                   + 3.0*D**5*x[2]*sqrt((D - 1)/D**3) + 1.0*D**4*x[0]**2*sqrt((D - 1)/D**3)
                   + 3.0*D**4*x[1]*sqrt((D - 1)/D**3) + 4.5*D**4*x[3]*sqrt((D - 1)/D**3)
                   - 6.0*D**4*x[2]*sqrt((D - 1)/D**3) + 1.0*D**3*x[0]**2*sqrt((D - 1)/D**3)
                   - 3.0*D**3*x[1]*sqrt((D - 1)/D**3) + 1.5*D**3*x[3]*sqrt(D*(D - 1))
                   + 3.0*D**3*x[2]*sqrt((D - 1)/D**3) - 2.0*D**2*x[0]**2*sqrt((D - 1)/D**3)
                   - 4.5*D**2*x[3]*sqrt(D*(D - 1)) + 3.0*D**2*x[2]*sqrt(D*(D - 1))
                   - 1.0*D*x[0]**2*sqrt(D*(D - 1)) + 3.0*D*x[1]*sqrt(D*(D - 1)) - 3.0*D*x[2]*sqrt(D*(D - 1))
                   + 2.0*x[0]**2*sqrt(D*(D - 1)))/(D**3*(D - 1))
    # G2: \sum_{i,j,k} W_{ij}^2 W_{jk}
    g[1] = 1.0*x[0]*(0.5*D**4*x[3] - 2.0*D**3*x[3] + 2.0*D**3*x[2] + 1.0*D**2*x[0]**2 + 3.0*D**2*x[1] + 1.5*D**2*x[3]
                   + 1.0*D**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 6.0*D**2*x[2] - 1.0*D*x[0]**2
                   + 2.0*D*x[1]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 5.0*D*x[1]
                   - 2.0*D*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 6.0*D*x[2] + 2.0*x[1]
                   - 2.0*x[2])/(D**3*sqrt((D - 1)/D**3))
    # G3: \sum_{i,j,k} W_{ij} W_{jk} W_{ki}
    g[2] = 0.5*x[0]*(-3.0*D**5*x[3]*sqrt((D - 1)/D**3) + 9.0*D**4*x[3]*sqrt((D - 1)/D**3)
                   - 3.0*D**4*x[2]*sqrt((D - 1)/D**3) - 3.0*D**3*x[2]*sqrt((D - 1)/D**3)
                   + 3.0*D**3*x[2]*sqrt(D*(D - 1)) - 2.0*D**2*x[0]**2*sqrt((D - 1)/D**3)
                   + 2.0*D**2*x[0]**2*sqrt(D*(D - 1)) - 6.0*D**2*x[1]*sqrt((D - 1)/D**3)
                   + 6.0*D**2*x[1]*sqrt(D*(D - 1)) + 6.0*D**2*x[2]*sqrt((D - 1)/D**3)
                   - 12.0*D**2*x[2]*sqrt(D*(D - 1)) - 4.0*D*x[0]**2*sqrt(D*(D - 1)) - 12.0*D*x[1]*sqrt(D*(D - 1))
                   + 15.0*D*x[2]*sqrt(D*(D - 1)) + 2.0*x[0]**2*sqrt(D*(D - 1)) + 6.0*x[1]*sqrt(D*(D - 1))
                   - 6.0*x[2]*sqrt(D*(D - 1)))/(D**3*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)))

    # G4: \sum_{i,j,k,l} W_{ij}^2 W_{kl}
    g[3] = 1.0*x[0]*(0.5*D**4*x[3]*sqrt(D*(D - 1)) + 2.0*D**3*x[1]*sqrt((D - 1)/D**3) - 2.0*D**3*x[3]*sqrt(D*(D - 1))
                   + 1.0*D**3*x[2]*sqrt(D*(D - 1)) + 1.0*D**2*x[0]**2*sqrt(D*(D - 1))
                   - 2.0*D**2*x[1]*sqrt((D - 1)/D**3) + 3.0*D**2*x[1]*sqrt(D*(D - 1))
                   + 1.5*D**2*x[3]*sqrt(D*(D - 1)) - 2.0*D**2*x[2]*sqrt(D*(D - 1))
                   - 1.0*D*x[0]**2*sqrt(D*(D - 1)) - 5.0*D*x[1]*sqrt(D*(D - 1)) + 1.0*D*x[2]*sqrt(D*(D - 1))
                   + 2.0*x[1]*sqrt(D*(D - 1)))/(D**2*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)))
    # G5: \sum_{i,j,k,l} W_{ij} W_{jk} W_{kl}
    g[4] = x[0]*(2*D**3*x[2] + 2*D**2*x[0]**2 + 6*D**2*x[1] - D**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 8*D**2*x[2]
               - 4*D*x[0]**2 - 12*D*x[1] + 2*D*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 10*D*x[2] + 2*x[0]**2
               + 6*x[1] - 4*x[2])/(2*D**2*sqrt((D - 1)/D**3))
    # G6: \sum_{i,j,k,l} W_{ij} W_{ik} W_{il}
    g[5] = x[0]*(3*D**3*x[2] + 2*D**2*x[0]**2 + 6*D**2*x[1] - 12*D**2*x[2] - 4*D*x[0]**2 - 12*D*x[1] + 15*D*x[2] + 2*x[0]**2
               + 6*x[1] - 6*x[2])/(2*D**2*sqrt((D - 1)/D**3))
    # G7: \sum_{i,j,k,l,m} W_{ij} W_{jk} W_{lm}
    g[6] = x[0]*(D**3*x[2] + 2*D**2*x[0]**2 + 6*D**2*x[1] - 4*D**2*x[2] - 4*D*x[0]**2 - 12*D*x[1] + 5*D*x[2] + 2*x[0]**2 +
               6*x[1] - 2*x[2])/(2*D*sqrt((D - 1)/D**3))
    # G8: \sum_{i,j,k,l,m,n} W_{ij} W_{kl} W_{mn}
    g[7] = D**3*x[0]*sqrt((D - 1)/D**3)*(D*x[0]**2 + 3*D*x[1] - x[0]**2 - 3*x[1])

    # Quartic
    # 2 vertex
    # G9: \sum_{i,j} W_{ij}^4
    g[8] = (12*D**16*x[3]*x[2]*((D - 1)/D**3)**(5/2)*(1 - D)**5*(D - 2)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1) + 12.0*D**16*x[3]*x[2]*((D - 1)/D**3)**(5/2)*(1 - D)**5*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1) + 12*D**16*x[2]**2*((D - 1)/D**3)**(5/2)*(1 - D)**5*(D - 2)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1) + 6*D**15*x[3]*x[2]*((D - 1)/D**3)**(5/2)*(1 - D)**5*(D - 2)*(D**2 - 4*D + 4)*(D**2 - 2*D + 1) + 48*D**14*x[3]*x[2]*((D - 1)/D**3)**(5/2)*(1 - D)**5*(D - 2)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1) + 12*D**2*x[0]**2*x[3]*(D*(D - 1))**(11/2)*(D - 2)*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1) + 12*D*x[0]**2*x[3]*(D*(D - 1))**(13/2)*(D - 6)*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1) - 4*D*x[0]**2*(D*(D - 1))**(11/2)*(D - 2)*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(x[0]**2 + 3*x[1] + 9*x[3]) - 24*x[0]**2*x[1]*(D*(D - 1))**(9/2)*(D - 2)*(D - 1)**2*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1) + x[0]**2*x[3]*(D*(D - 1))**(13/2)*(18.0 - 6.0*D)*(D - 2)*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1) + 156*x[0]**2*x[3]*(D*(D - 1))**(13/2)*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1) + 48*x[0]**2*x[3]*(D*(D - 1))**(11/2)*(D - 1)*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1) + 12*x[0]**2*x[2]*(D*(D - 1))**(13/2)*(D - 1)*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1) + x[0]**2*(D*(D - 1))**(11/2)*(D - 2)*(D - 1)*(24*x[1] - 12.0*x[3])*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1) + 12*x[0]**2*(D*(D - 1))**(11/2)*(D - 2)*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(x[0]**2 + 3*x[1] + 3*x[3]) + 12*x[3]**2*(D - 2)*(D - 1)**9*(D + 25)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/((D - 1)/D**3)**(5/2) - 150*x[3]**2*(D - 2)*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 2*D + 1)/((D - 1)/D**3)**(5/2) + 48*x[3]*x[2]*(D - 2)*(D - 1)**10*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/((D - 1)/D**3)**(5/2) - 114*x[3]*(D - 2)*(D - 1)**9*(x[0]**2 + x[1])*(D**2 - 4*D + 4)*(D**2 - 2*D + 1)/((D - 1)/D**3)**(5/2) + x[3]*(D - 2)*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(-6.0*x[0]**2 - 12.0*x[1] + 6.0*x[3])/((D - 1)/D**3)**(5/2) - x[3]*(D - 2)*(D - 1)**8*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(3.0*D*x[3] + 30.0*x[0]**2 + 18.0*x[1] + 33.0*x[3])/((D - 1)/D**3)**(5/2) + x[3]*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(24.0*D*x[3] + 36*x[0]**2 - 36*x[1] + 126.0*x[3])/((D - 1)/D**3)**(5/2) + 12*x[2]**2*(D - 2)*(D - 1)**10*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/((D - 1)/D**3)**(5/2) + x[2]*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(12*D*x[0]**2 + 12*D*x[1] + 36.0*D*x[3] - 12*x[0]**2 - 12*x[1] - 36.0*x[3])/(2*((D - 1)/D**3)**(5/2)) + (D - 2)*(D - 1)**8*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(13*x[0]**4 + 6*x[0]**2*x[1] - 9*x[1]**2)/((D - 1)/D**3)**(3/2) + (D - 2)*(D - 1)**8*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(x[0]**4 + 6*x[0]**2*x[1] + 3*x[1]**2)/((D - 1)/D**3)**(3/2) - 2*(D - 2)*(D - 1)**8*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(3*D*x[0]**2*x[3] + 3*D*x[1]*x[3] + 2*x[0]**4 + 12*x[0]**2*x[1] + 6*x[1]**2)/((D - 1)/D**3)**(3/2) + 6*(D - 2)*(D - 1)**7*(-3*x[0]**4 + x[1]**2)*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/((D - 1)/D**3)**(3/2) + (D - 2)*(D - 1)**7*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(18*D*x[0]**4 + 12*D*x[0]**2*x[1] + 12.0*D*x[0]**2*x[3] + 6*D*x[1]**2 + 36*x[0]**4 - 12*x[0]**2*x[1] - 24*x[1]**2)/((D - 1)/D**3)**(3/2) + (D - 2)*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(x[0]**4 + 6*x[0]**2*x[1] + 24*x[0]**2*x[3] + 3*x[1]**2 + 24*x[1]*x[3] + 18*x[3]**2)/((D - 1)/D**3)**(5/2) - 24*x[0]**2*x[3]*(D*(D - 1))**(13/2)*(D + 5)*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/D + 24*x[0]**2*x[2]*(D*(D - 1))**(13/2)*(1 - D)*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/D + 4*x[0]**2*(D*(D - 1))**(11/2)*(D - 2)*(x[0]**2 + 3*x[1])*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/D - 12*x[0]**2*(D*(D - 1))**(11/2)*(D - 2)*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(D*x[3] + x[0]**2 + 3*x[1])/D - 6*x[1]*x[3]*(D - 2)*(D - 1)**10*(D**2 - 4*D + 4)*(D**2 - 2*D + 1)/(D*((D - 1)/D**3)**(7/2)) - 48*x[3]**2*(D - 2)*(D - 1)**9*(D + 3)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/(D*((D - 1)/D**3)**(5/2)) + 12*x[3]**2*(D - 2)*(D - 1)**9*(D + 7)*(D**2 - 4*D + 4)*(D**2 - 2*D + 1)/(D*((D - 1)/D**3)**(5/2)) - 24*x[3]**2*(D - 2)*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 2*D + 1)/(D*((D - 1)/D**3)**(5/2)) + 48*x[3]**2*(D - 2)*(D - 1)**9*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/(D*((D - 1)/D**3)**(5/2)) + x[3]**2*(42.0 - 6.0*D)*(D - 1)**10*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/(D*((D - 1)/D**3)**(7/2)) + 6*x[3]**2*(D - 7)*(D - 2)*(D - 1)**10*(D**2 - 4*D + 4)*(D**2 - 2*D + 1)/(D*((D - 1)/D**3)**(7/2)) + 3*x[3]**2*(D - 2)*(D - 1)**10*(D**2 - 10*D + 41)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/(D*((D - 1)/D**3)**(7/2)) + 3*x[3]**2*(D - 2)*(D - 1)**10*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)/(D*((D - 1)/D**3)**(7/2)) - 6.0*x[3]**2*(D - 2)*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/(D*((D - 1)/D**3)**(7/2)) + 3.0*x[3]*x[2]*(D - 1)**11*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/(D*((D - 1)/D**3)**(7/2)) + 150*x[3]*(D - 2)*(D - 1)**9*(x[0]**2 + x[1])*(D**2 - 4*D + 4)*(D**2 - 2*D + 1)/(D*((D - 1)/D**3)**(5/2)) + x[3]*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(-12*D*x[0]**2 - 12*D*x[1] - 36.0*D*x[3] - 66*x[0]**2 + 90*x[1] - 60.0*x[3])/(D*((D - 1)/D**3)**(5/2)) + 3*x[2]**2*(D - 2)*(D - 1)**11*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/(D*((D - 1)/D**3)**(7/2)) + 6*x[2]*(D - 2)*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 2*D + 1)*(D*x[0]**2 + D*x[1] + 2*D*x[3] - x[0]**2 - x[1] - 2*x[3])/(D*((D - 1)/D**3)**(5/2)) + x[2]*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(-36*D*x[0]**2 - 12*D*x[1] - 24.0*D*x[3] + 36*x[0]**2 + 12*x[1] + 24.0*x[3])/(2*D*((D - 1)/D**3)**(5/2)) + (D - 2)*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(x[0]**4 + 6*x[0]**2*x[1] + 3.0*x[0]**2*x[3] + 3*x[1]**2 + 21.0*x[1]*x[3] - 3.0*x[3]**2)/(D*((D - 1)/D**3)**(5/2)) - 4*(D - 2)*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(x[0]**4 + 6*x[0]**2*x[1] + 9*x[0]**2*x[3] + 3*x[1]**2 + 9*x[1]*x[3] + 3*x[3]**2)/(D*((D - 1)/D**3)**(5/2)) + (D - 2)*(D - 1)**8*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(3.0*D*x[0]**2*x[3] + 3.0*D*x[1]*x[3] + 6.0*D*x[3]**2 + 18*x[0]**4 + 51.0*x[0]**2*x[3] - 6*x[1]**2 + 15.0*x[1]*x[3] + 18.0*x[3]**2)/(D*((D - 1)/D**3)**(5/2)) + 114*x[3]**2*(D - 2)*(D - 1)**10*(D**2 - 4*D + 4)*(D**2 - 2*D + 1)/(D**2*((D - 1)/D**3)**(7/2)) - 264*x[3]**2*(D - 2)*(D - 1)**10*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/(D**2*((D - 1)/D**3)**(7/2)) + 24*x[3]*(D - 2)*(D - 1)**9*(x[0]**2 + x[1])*(D**2 - 4*D + 4)*(D**2 - 2*D + 1)/(D**2*((D - 1)/D**3)**(5/2)) - 12*x[3]*(D - 2)*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 2*D + 1)*(D*x[0]**2 + D*x[1] + 7*x[0]**2 + 7*x[1])/(D**2*((D - 1)/D**3)**(5/2)) + 24*x[3]*(D - 1)**9*(-x[0]**2 + x[1])*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)/(D**2*((D - 1)/D**3)**(5/2)) + x[3]*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(36*D*x[0]**2 + 12*D*x[1] + 24.0*D*x[3] + 36*x[0]**2 - 84*x[1])/(D**2*((D - 1)/D**3)**(5/2)) + x[3]*(D - 2)*(D - 1)**10*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(0.75*D**2*x[3] - 0.75*D*x[3] + 3.0*x[0]**2 + 3.0*x[1] - 3.0*x[3])/(D**2*((D - 1)/D**3)**(7/2)) - 6*x[3]*(D - 2)*(D - 1)**10*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(x[0]**2 + x[1] + 2*x[3])/(D**2*((D - 1)/D**3)**(7/2)) + 6*x[3]*(D - 2)*(D - 1)**10*(D**2 - 4*D + 4)*(D**2 - 2*D + 1)*(-D*x[0]**2 + 7*x[0]**2 + 7*x[1])/(D**2*((D - 1)/D**3)**(7/2)) + x[3]*(D - 2)*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(6.0*x[0]**2 + 6.0*x[1] + 24.0*x[3])/(D**2*((D - 1)/D**3)**(7/2)) + x[3]*(D - 1)**10*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(-6.0*D*x[3] - 6*x[0]**2 + 6*x[1] - 108.0*x[3])/(D**2*((D - 1)/D**3)**(7/2)) + 12*x[2]*(D - 2)*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 2*D + 1)*(-D*x[0]**2 - D*x[1] + x[0]**2 + x[1])/(D**2*((D - 1)/D**3)**(5/2)) + 12*x[2]*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(D*x[0]**2 - D*x[1] - x[0]**2 + x[1])/(D**2*((D - 1)/D**3)**(5/2)) + (D - 2)*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(-14*x[0]**4 - 12*x[0]**2*x[1] + 6*x[1]**2 - 12.0*x[1]*x[3])/(D**2*((D - 1)/D**3)**(5/2)) + 3*(D - 2)*(D - 1)**9*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D*x[3]**2 + 2*x[0]**4 + 12*x[0]**2*x[1] + 8*x[0]**2*x[3] + 6*x[1]**2 + 8*x[1]*x[3])/(D**2*((D - 1)/D**3)**(5/2)) + (D - 2)*(D - 1)**8*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1)*(-12.0*D*x[0]**2*x[3] - 12.0*D*x[1]*x[3] - 6.0*D*x[3]**2 - 54*x[0]**4 - 30.0*x[0]**2*x[3] + 18*x[1]**2 + 6.0*x[1]*x[3])/(D**2*((D - 1)/D**3)**(5/2)))/(D**16*((D - 1)/D**3)**(5/2)*(D - 2)*(D - 1)**4*(D**2 - 4*D + 4)*(D**2 - 3*D + 2)*(D**2 - 2*D + 1))

    # 3 vertex
    # G10: \sum_{i,j,k} W_{ij}^2 W_{jk}^2
    g[9] = (0.5*D**7*x[3]**2 - 3.0*D**6*x[3]**2 + 2.0*D**6*x[3]*x[2] + 2.0*D**5*x[0]**2*x[3] + 2.0*D**5*x[1]*x[3] + 4.5*D**5*x[3]**2 - 10.0*D**5*x[3]*x[2] + 3.0*D**5*x[2]**2 - 10.0*D**4*x[0]**2*x[3] + 8.0*D**4*x[0]**2*x[2] - 10.0*D**4*x[1]*x[3] + 8.0*D**4*x[1]*x[2] + 16.0*D**4*x[3]*x[2] - 13.0*D**4*x[2]**2 + 2.0*D**3*x[0]**4 + 12.0*D**3*x[0]**2*x[1] + 12.0*D**3*x[0]**2*x[3] + 8.0*D**3*x[0]**2*x[2]*np.sqrt((D - 1)/D**3)*np.sqrt(D*(D - 1)) - 36.0*D**3*x[0]**2*x[2] + 6.0*D**3*x[1]**2 + 12.0*D**3*x[1]*x[3] - 28.0*D**3*x[1]*x[2] - 12.0*D**3*x[3]*x[2] + 22.0*D**3*x[2]**2 - 4.0*D**2*x[0]**4 + 16.0*D**2*x[0]**2*x[1]*np.sqrt((D - 1)/D**3)*np.sqrt(D*(D - 1)) - 40.0*D**2*x[0]**2*x[1] - 32.0*D**2*x[0]**2*x[2]*np.sqrt((D - 1)/D**3)*np.sqrt(D*(D - 1)) + 64.0*D**2*x[0]**2*x[2] - 12.0*D**2*x[1]**2 + 24.0*D**2*x[1]*x[2] - 12.0*D**2*x[2]**2 - 32.0*D*x[0]**2*x[1]*np.sqrt((D - 1)/D**3)*np.sqrt(D*(D - 1)) + 48.0*D*x[0]**2*x[1] + 32.0*D*x[0]**2*x[2]*np.sqrt((D - 1)/D**3)*np.sqrt(D*(D - 1)) - 64.0*D*x[0]**2*x[2] - 32.0*x[0]**2*x[1] + 32.0*x[0]**2*x[2])/(D**3*(2.0*D - 4.0))
    # G11 \sum_{i,j,k} W_{ij} W_{jk}^3
    g[10] = 1.0*(0.75*D**6*x[2]*x[3] + 1.5*D**5*x[0]**2*x[3] + 1.5*D**5*x[1]*x[3] + 1.5*D**5*x[2]**2 - 4.5*D**5*x[2]*x[3] + 4.5*D**4*x[0]**2*x[2] + 1.5*D**4*x[0]**2*x[3]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 7.5*D**4*x[0]**2*x[3] + 4.5*D**4*x[1]*x[2] - 6.0*D**4*x[1]*x[3] - 6.0*D**4*x[2]**2 + 8.25*D**4*x[2]*x[3] + 1.0*D**3*x[0]**4 + 6.0*D**3*x[0]**2*x[1] + 6.0*D**3*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 16.5*D**3*x[0]**2*x[2] - 4.5*D**3*x[0]**2*x[3]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 10.5*D**3*x[0]**2*x[3] + 3.0*D**3*x[1]**2 - 10.5*D**3*x[1]*x[2] + 4.5*D**3*x[1]*x[3] + 7.5*D**3*x[2]**2 - 4.5*D**3*x[2]*x[3] - 1.0*D**2*x[0]**4*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 9.0*D**2*x[0]**2*x[1]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 15.0*D**2*x[0]**2*x[1] - 12.0*D**2*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 24.0*D**2*x[0]**2*x[2] - 4.5*D**2*x[0]**2*x[3] - 3.0*D**2*x[1]**2 + 6.0*D**2*x[1]*x[2] - 3.0*D**2*x[2]**2 + 2.0*D*x[0]**4*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 3.0*D*x[0]**4 - 6.0*D*x[0]**2*x[1]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 15.0*D*x[0]**2*x[1] + 6.0*D*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 18.0*D*x[0]**2*x[2] + 2.0*x[0]**4 - 6.0*x[0]**2*x[1] + 6.0*x[0]**2*x[2])/(D**3*(D - 1))
    # G12 \sum_{i,j,k} W_{ij} W_{ik} W_{jk}^2
    g[11] = (0.5*D**7*x[2]*x[3] - 0.5*D**7*x[3]**2 + 1.0*D**6*x[0]**2*x[3] + 1.0*D**6*x[1]*x[3] + 2.0*D**6*x[2]**2 - 8.0*D**6*x[2]*x[3] + 5.0*D**6*x[3]**2 + 7.0*D**5*x[0]**2*x[2] - 6.0*D**5*x[0]**2*x[3]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 6.0*D**5*x[0]**2*x[3] + 7.0*D**5*x[1]*x[2] - 12.0*D**5*x[1]*x[3] - 18.0*D**5*x[2]**2 + 39.5*D**5*x[2]*x[3] - 16.5*D**5*x[3]**2 + 2.0*D**4*x[0]**4 + 12.0*D**4*x[0]**2*x[1] - 2.0*D**4*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 43.0*D**4*x[0]**2*x[2] + 30.0*D**4*x[0]**2*x[3]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 5.0*D**4*x[0]**2*x[3] + 6.0*D**4*x[1]**2 - 45.0*D**4*x[1]*x[2] + 41.0*D**4*x[1]*x[3] + 54.0*D**4*x[2]**2 - 74.0*D**4*x[2]*x[3] + 18.0*D**4*x[3]**2 - 8.0*D**3*x[0]**4 + 8.0*D**3*x[0]**2*x[1]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 56.0*D**3*x[0]**2*x[1] - 14.0*D**3*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 98.0*D**3*x[0]**2*x[2] - 36.0*D**3*x[0]**2*x[3]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 24.0*D**3*x[0]**2*x[3] - 24.0*D**3*x[1]**2 + 86.0*D**3*x[1]*x[2] - 42.0*D**3*x[1]*x[3] - 62.0*D**3*x[2]**2 + 42.0*D**3*x[2]*x[3] - 4.0*D**2*x[0]**4*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 12.0*D**2*x[0]**4 - 36.0*D**2*x[0]**2*x[1]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 92.0*D**2*x[0]**2*x[1] + 56.0*D**2*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 118.0*D**2*x[0]**2*x[2] - 36.0*D**2*x[0]**2*x[3] + 24.0*D**2*x[1]**2 - 48.0*D**2*x[1]*x[2] + 24.0*D**2*x[2]**2 + 8.0*D*x[0]**4*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 12.0*D*x[0]**4 + 40.0*D*x[0]**2*x[1]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 76.0*D*x[0]**2*x[1] - 40.0*D*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 96.0*D*x[0]**2*x[2] + 8.0*x[0]**4 + 40.0*x[0]**2*x[1] - 40.0*x[0]**2*x[2])/(D**3*(2.0*D**2 - 6.0*D + 4.0))

    # 4 vertex
    # G13: \sum_{i,j,k,l} W_{ij} W_{kj} W_{lj}^2
    g[12] = 0.25*D**3*x[2]*x[3] + 0.5*D**2*x[0]**2*x[3] + 0.5*D**2*x[1]*x[3] + 1.0*D**2*x[2]**2 - 1.5*D**2*x[2]*x[3] + 3.5*D*x[0]**2*x[2] - 2.0*D*x[0]**2*x[3] + 3.5*D*x[1]*x[2] - 2.0*D*x[1]*x[3] - 4.5*D*x[2]**2 + 2.75*D*x[2]*x[3] + 1.0*x[0]**4 + 6.0*x[0]**2*x[1] + 2.0*x[0]**2*x[2]*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D) - 11.5*x[0]**2*x[2] + 1.5*x[0]**2*x[3] + 3.0*x[1]**2 - 9.5*x[1]*x[2] + 1.5*x[1]*x[3] + 6.5*x[2]**2 - 1.5*x[2]*x[3] - 1.0*x[0]**4/D + 4.0*x[0]**2*x[1]*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)/D - 10.0*x[0]**2*x[1]/D - 4.0*x[0]**2*x[2]*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)/D + 12.0*x[0]**2*x[2]/D - 3.0*x[1]**2/D + 6.0*x[1]*x[2]/D - 3.0*x[2]**2/D + 4.0*x[0]**2*x[1]/D**2 - 4.0*x[0]**2*x[2]/D**2
    # G14: \sum_{i,j,k,l} W_{ij} W_{kl}^3
    g[13] = 1.0*(1.5*D**5*x[0]**2*x[3] + 1.5*D**5*x[1]*x[3] + 3.0*D**4*x[0]**2*x[2] + 1.5*D**4*x[0]**2*x[3]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 7.5*D**4*x[0]**2*x[3] + 3.0*D**4*x[1]*x[2] - 6.0*D**4*x[1]*x[3] + 1.0*D**3*x[0]**4 + 6.0*D**3*x[0]**2*x[1] + 3.0*D**3*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 9.0*D**3*x[0]**2*x[2] - 4.5*D**3*x[0]**2*x[3]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 10.5*D**3*x[0]**2*x[3] + 3.0*D**3*x[1]**2 - 6.0*D**3*x[1]*x[2] + 4.5*D**3*x[1]*x[3] - 1.0*D**2*x[0]**4*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 9.0*D**2*x[0]**2*x[1]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 15.0*D**2*x[0]**2*x[1] - 3.0*D**2*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 9.0*D**2*x[0]**2*x[2] - 4.5*D**2*x[0]**2*x[3] - 3.0*D**2*x[1]**2 + 3.0*D**2*x[1]*x[2] + 2.0*D*x[0]**4*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 3.0*D*x[0]**4 - 6.0*D*x[0]**2*x[1]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 15.0*D*x[0]**2*x[1] - 3.0*D*x[0]**2*x[2] + 2.0*x[0]**4 - 6.0*x[0]**2*x[1])/(D**2*(D - 1))
    # G15: \sum_{i,j,k,l} W_{ij} W_{jk}^2 W_{kl}
    g[14] = 0.5*D**2*x[0]**2*x[3] + 0.5*D**2*x[1]*x[3] + 0.5*D**2*x[2]**2 - 0.25*D**2*x[2]*x[3] + 3.0*D*x[0]**2*x[2] - 2.0*D*x[0]**2*x[3] + 3.0*D*x[1]*x[2] - 2.0*D*x[1]*x[3] - 3.0*D*x[2]**2 + 1.25*D*x[2]*x[3] + 1.0*x[0]**4 + 6.0*x[0]**2*x[1] + 1.0*x[0]**2*x[2]*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D) - 9.5*x[0]**2*x[2] + 1.5*x[0]**2*x[3] + 3.0*x[1]**2 - 8.5*x[1]*x[2] + 1.5*x[1]*x[3] + 5.5*x[2]**2 - 1.5*x[2]*x[3] - 1.0*x[0]**4/D + 4.0*x[0]**2*x[1]*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)/D - 10.0*x[0]**2*x[1]/D - 2.0*x[0]**2*x[2]*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)/D + 9.0*x[0]**2*x[2]/D - 3.0*x[1]**2/D + 6.0*x[1]*x[2]/D - 3.0*x[2]**2/D + 4.0*x[0]**2*x[1]/D**2 - 2.0*x[0]**2*x[2]/D**2
    # G16: \sum_{i,j,k,l} W_{ij} W_{jk} W_{kl}^2
    g[15] = 0.25*D**3*x[3]*x[2] + 0.5*D**2*x[0]**2*x[3] + 0.5*D**2*x[1]*x[3] - 1.0*D**2*x[3]*x[2] + 0.5*D**2*x[2]**2 - 2.0*D*x[0]**2*x[3] + 2.5*D*x[0]**2*x[2] - 2.0*D*x[1]*x[3] + 2.5*D*x[1]*x[2] + 1.25*D*x[3]*x[2] - 2.0*D*x[2]**2 + 1.0*x[0]**4 + 6.0*x[0]**2*x[1] + 1.5*x[0]**2*x[3] - 7.5*x[0]**2*x[2] + 3.0*x[1]**2 + 1.5*x[1]*x[3] - 7.5*x[1]*x[2] - 1.5*x[3]*x[2] + 4.5*x[2]**2 - 1.0*x[0]**4/D - 10.0*x[0]**2*x[1]/D + 4.0*x[0]**2*x[1]/(D*np.sqrt(D**(-2) - 1/D**3)*np.sqrt(D**2 - D)) + 6.0*x[0]**2*x[2]/D - 3.0*x[1]**2/D + 6.0*x[1]*x[2]/D - 3.0*x[2]**2/D + 4.0*x[0]**2*x[1]/D**2 - 8.0*x[0]**2*x[1]/(D**2*np.sqrt(D**(-2) - 1/D**3)*np.sqrt(D**2 - D)) + 4.0*x[0]**2*x[1]/(D**3*np.sqrt(D**(-2) - 1/D**3)*np.sqrt(D**2 - D))
    # G17: \sum_{i,j,k,l} W_{ij} W_{jk} W_{ik} W_{kl}
    g[16] = 1.0*(0.5*D**5*x[2]**2 - 0.5*D**5*x[2]*x[3] + 2.5*D**4*x[0]**2*x[2] - 1.5*D**4*x[0]**2*x[3]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 2.5*D**4*x[1]*x[2] - 1.5*D**4*x[1]*x[3] - 4.5*D**4*x[2]**2 + 3.5*D**4*x[2]*x[3] + 1.0*D**3*x[0]**4 + 6.0*D**3*x[0]**2*x[1] - 2.5*D**3*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 12.5*D**3*x[0]**2*x[2] + 4.5*D**3*x[0]**2*x[3]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 3.0*D**3*x[1]**2 - 15.0*D**3*x[1]*x[2] + 6.0*D**3*x[1]*x[3] + 13.5*D**3*x[2]**2 - 7.5*D**3*x[2]*x[3] - 3.0*D**2*x[0]**4 - 18.0*D**2*x[0]**2*x[1] + 1.5*D**2*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 20.5*D**2*x[0]**2*x[2] - 9.0*D**2*x[1]**2 + 24.5*D**2*x[1]*x[2] - 4.5*D**2*x[1]*x[3] - 15.5*D**2*x[2]**2 + 4.5*D**2*x[2]*x[3] - 1.0*D*x[0]**4*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 3.0*D*x[0]**4 - 3.0*D*x[0]**2*x[1]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 15.0*D*x[0]**2*x[1] + 1.0*D*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) - 11.5*D*x[0]**2*x[2] + 6.0*D*x[1]**2 - 12.0*D*x[1]*x[2] + 6.0*D*x[2]**2 - 1.0*x[0]**4 - 3.0*x[0]**2*x[1] + 1.0*x[0]**2*x[2])/(D**2*(D - 1))
    # G18: \sum_{i,j,k,l} W_{ij}^2 W_{kl}^2
    g[17] = 0.25*D**4*x[3]**2 + 1.0*D**3*x[2]*x[3] - 1.5*D**3*x[3]**2 + 1.0*D**2*x[0]**2*x[3] + 1.0*D**2*x[1]*x[3] + 1.0*D**2*x[2]**2 - 4.0*D**2*x[2]*x[3] + 3.25*D**2*x[3]**2 + 8.0*D*x[0]**2*x[1]*sqrt(D**(-2) - 1/D**3)/sqrt(D**2 - D) + 2.0*D*x[0]**2*x[2] - 3.0*D*x[0]**2*x[3] + 2.0*D*x[1]*x[2] - 3.0*D*x[1]*x[3] + 3.0*D*x[2]*x[3] - 3.0*D*x[3]**2 + 1.0*x[0]**4 - 8.0*x[0]**2*x[1]*sqrt(D**(-2) - 1/D**3)/sqrt(D**2 - D) + 6.0*x[0]**2*x[1] - 2.0*x[0]**2*x[2] + 3.0*x[1]**2 - 2.0*x[1]*x[2] - 1.0*x[2]**2 - 8.0*x[0]**2*x[1]/D + 8.0*x[0]**2*x[1]/D**2
    # G19: \sum_{i,j,k,l} W_{ij} W_{jk} W_{kl} W_{li}
    g[18] = (1.0*D**7*x[3]**2 - 7.5*D**6*x[3]**2 + 2.0*D**6*x[3]*x[2] + 1.0*D**6*x[2]**2 + 4.0*D**5*x[0]**2*x[2] + 4.0*D**5*x[1]*x[2] + 18.0*D**5*x[3]**2 - 8.0*D**5*x[3]*x[2] - 7.0*D**5*x[2]**2 + 2.0*D**4*x[0]**4 + 12.0*D**4*x[0]**2*x[1] + 6.0*D**4*x[0]**2*x[3] - 4.0*D**4*x[0]**2*x[2]*np.sqrt((D - 1)/D**3)*np.sqrt(D*(D - 1)) - 28.0*D**4*x[0]**2*x[2] + 6.0*D**4*x[1]**2 + 6.0*D**4*x[1]*x[3] - 32.0*D**4*x[1]*x[2] - 11.5*D**4*x[3]**2 - 6.0*D**4*x[3]*x[2] + 33.0*D**4*x[2]**2 - 10.0*D**3*x[0]**4 - 60.0*D**3*x[0]**2*x[1] - 30.0*D**3*x[0]**2*x[3] + 20.0*D**3*x[0]**2*x[2]*np.sqrt((D - 1)/D**3)*np.sqrt(D*(D - 1)) + 80.0*D**3*x[0]**2*x[2] - 30.0*D**3*x[1]**2 - 30.0*D**3*x[1]*x[3] + 104.0*D**3*x[1]*x[2] - 6.0*D**3*x[3]**2 + 48.0*D**3*x[3]*x[2] - 85.0*D**3*x[2]**2 + 18.0*D**2*x[0]**4 + 108.0*D**2*x[0]**2*x[1] + 36.0*D**2*x[0]**2*x[3] - 32.0*D**2*x[0]**2*x[2]*np.sqrt((D - 1)/D**3)*np.sqrt(D*(D - 1)) - 96.0*D**2*x[0]**2*x[2] + 54.0*D**2*x[1]**2 + 36.0*D**2*x[1]*x[3] - 148.0*D**2*x[1]*x[2] - 36.0*D**2*x[3]*x[2] + 94.0*D**2*x[2]**2 - 12.0*D*x[0]**4 - 72.0*D*x[0]**2*x[1] + 16.0*D*x[0]**2*x[2]*np.sqrt((D - 1)/D**3)*np.sqrt(D*(D - 1)) + 24.0*D*x[0]**2*x[2] - 36.0*D*x[1]**2 + 72.0*D*x[1]*x[2] - 36.0*D*x[2]**2 + 16.0*x[0]**2*x[2])/(D**2*(2.0*D**2 - 6.0*D + 4.0))

    # 5 vertex
    # G20: \sum_{i,j,k,l, m} W_{ik} W_{jk} W_{lk} W_{mk}
    g[19] = 3*D**3*x[2]**2/4 + 3*D**2*x[0]**2*x[2] + 3*D**2*x[1]*x[2] - 9*D**2*x[2]**2/2 + D*x[0]**4 + 6*D*x[0]**2*x[1] - 12*D*x[0]**2*x[2] + 3*D*x[1]**2 - 12*D*x[1]*x[2] + 39*D*x[2]**2/4 - 2*x[0]**4 - 12*x[0]**2*x[1] + 15*x[0]**2*x[2] - 6*x[1]**2 + 15*x[1]*x[2] - 9*x[2]**2 + x[0]**4/D + 6*x[0]**2*x[1]/D - 6*x[0]**2*x[2]/D + 3*x[1]**2/D - 6*x[1]*x[2]/D + 3*x[2]**2/D
    # G21: \sum_{i,j,k,l, m} W_{il} W_{jk} W_{lk} W_{mk}
    g[20] = D**3*x[2]**2/4 + 2*D**2*x[0]**2*x[2] + 2*D**2*x[1]*x[2] - 2*D**2*x[2]**2 + D*x[0]**4 + 6*D*x[0]**2*x[1] - D*x[0]**2*x[2]*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D) - 8*D*x[0]**2*x[2] + 3*D*x[1]**2 - 9*D*x[1]*x[2] + 23*D*x[2]**2/4 - 2*x[0]**4 - 12*x[0]**2*x[1] + 2*x[0]**2*x[2]*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D) + 10*x[0]**2*x[2] - 6*x[1]**2 + 13*x[1]*x[2] - 7*x[2]**2 + x[0]**4/D + 6*x[0]**2*x[1]/D - 4*x[0]**2*x[2]/D + 3*x[1]**2/D - 6*x[1]*x[2]/D + 3*x[2]**2/D
    # G22: \sum_{i,j,k,l, m} W_{ij} W_{kl} W_{lm} W_{mk}
    g[21] = 1.5*D**2*x[0]**2*x[2] - 1.5*D**2*x[0]**2*x[3]/(sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) + 1.5*D**2*x[1]*x[2] - 1.5*D**2*x[1]*x[3] + 1.0*D*x[0]**4 + 6.0*D*x[0]**2*x[1] - 6.0*D*x[0]**2*x[2] - 1.5*D*x[0]**2*x[2]/(sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) + 6.0*D*x[0]**2*x[3]/(sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) + 3.0*D*x[1]**2 - 7.5*D*x[1]*x[2] + 4.5*D*x[1]*x[3] - 2.0*x[0]**4 - 12.0*x[0]**2*x[1] + 7.5*x[0]**2*x[2] - 4.5*x[0]**2*x[3]/(sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) - 6.0*x[1]**2 + 6.0*x[1]*x[2] + 1.0*x[0]**4/D - 1.0*x[0]**4/(D*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) + 3.0*x[0]**2*x[1]/D - 3.0*x[0]**2*x[1]/(D*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) - 3.0*x[0]**2*x[2]/D + 4.5*x[0]**2*x[2]/(D*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) + 1.0*x[0]**4/(D**2*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) + 3.0*x[0]**2*x[1]/(D**2*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) - 3.0*x[0]**2*x[2]/(D**2*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D))
    # G23: \sum_{i,j,k,l, m} W_{ij}^2 W_{kl} W_{lm}
    g[22] = 0.25*D**4*x[2]*x[3] + 0.5*D**3*x[0]**2*x[3] + 0.5*D**3*x[1]*x[3] + 0.5*D**3*x[2]**2 - 1.5*D**3*x[2]*x[3] + 1.5*D**2*x[0]**2*x[2] - 2.0*D**2*x[0]**2*x[3] + 1.5*D**2*x[1]*x[2] - 2.0*D**2*x[1]*x[3] - 1.0*D**2*x[2]**2 + 2.75*D**2*x[2]*x[3] + 1.0*D*x[0]**4 + 6.0*D*x[0]**2*x[1] - 3.5*D*x[0]**2*x[2] + 1.5*D*x[0]**2*x[3] + 3.0*D*x[1]**2 - 3.5*D*x[1]*x[2] + 1.5*D*x[1]*x[3] - 0.5*D*x[2]**2 - 1.5*D*x[2]*x[3] - 1.0*x[0]**4 - 10.0*x[0]**2*x[1] + 4.0*x[0]**2*x[1]/(sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) + 2.0*x[0]**2*x[2] - 3.0*x[1]**2 + 2.0*x[1]*x[2] + 1.0*x[2]**2 + 4.0*x[0]**2*x[1]/D - 8.0*x[0]**2*x[1]/(D*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) + 4.0*x[0]**2*x[1]/(D**2*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D))
    # G24: \sum_{i,j,k,l, m} W_{ij} W_{kl} W_{lm}^2
    g[23] = 0.5*D**3*x[0]**2*x[3] + 0.5*D**3*x[1]*x[3] + 2.0*D**2*x[0]**2*x[2] - 2.0*D**2*x[0]**2*x[3] + 2.0*D**2*x[1]*x[2] - 2.0*D**2*x[1]*x[3] + 1.0*D*x[0]**4 + 6.0*D*x[0]**2*x[1] - 6.0*D*x[0]**2*x[2] + 1.0*D*x[0]**2*x[2]/(sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) + 1.5*D*x[0]**2*x[3] + 3.0*D*x[1]**2 - 5.0*D*x[1]*x[2] + 1.5*D*x[1]*x[3] - 1.0*x[0]**4 - 10.0*x[0]**2*x[1] + 4.0*x[0]**2*x[1]/(sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) + 6.0*x[0]**2*x[2] - 4.0*x[0]**2*x[2]/(sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) - 3.0*x[1]**2 + 3.0*x[1]*x[2] + 4.0*x[0]**2*x[1]/D - 8.0*x[0]**2*x[1]/(D*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) - 2.0*x[0]**2*x[2]/D + 5.0*x[0]**2*x[2]/(D*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) + 4.0*x[0]**2*x[1]/(D**2*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D)) - 2.0*x[0]**2*x[2]/(D**2*sqrt(D**(-2) - 1/D**3)*sqrt(D**2 - D))
    # G25: \sum_{i,j,k,l,m} W_{ij} W_{jk} W_{kl} W_{lm}
    g[24] = 0.25*D**3*x[3]*x[2] + 0.25*D**3*x[2]**2 + 1.5*D**2*x[0]**2*x[2] + 1.5*D**2*x[1]*x[2] - 1.25*D**2*x[3]*x[2] - 1.0*D**2*x[2]**2 + 1.0*D*x[0]**4 + 6.0*D*x[0]**2*x[1] - 1.0*D*x[0]**2*x[2]*np.sqrt(D**(-2) - 1/D**3)*np.sqrt(D**2 - D) - 6.0*D*x[0]**2*x[2] + 3.0*D*x[1]**2 - 7.0*D*x[1]*x[2] + 1.5*D*x[3]*x[2] + 2.75*D*x[2]**2 - 2.0*x[0]**4 - 12.0*x[0]**2*x[1] + 2.0*x[0]**2*x[2]*np.sqrt(D**(-2) - 1/D**3)*np.sqrt(D**2 - D) + 8.0*x[0]**2*x[2] - 6.0*x[1]**2 + 11.0*x[1]*x[2] - 5.0*x[2]**2 + 1.0*x[0]**4/D + 6.0*x[0]**2*x[1]/D - 4.0*x[0]**2*x[2]/D + 3.0*x[1]**2/D - 6.0*x[1]*x[2]/D + 3.0*x[2]**2/D

    # 6 vertex
    # G26: \sum_{i,j,k,l,m,n} W_{ij} W_{kl} W_{km} W_{kn}
    g[25] = 3*D**3*x[0]**2*x[2]/2 + 3*D**3*x[1]*x[2]/2 + D**2*x[0]**4 + 6*D**2*x[0]**2*x[1] - 6*D**2*x[0]**2*x[2] + 3*D**2*x[1]**2 - 6*D**2*x[1]*x[2] - 2*D*x[0]**4 - 12*D*x[0]**2*x[1] + 15*D*x[0]**2*x[2]/2 - 6*D*x[1]**2 + 15*D*x[1]*x[2]/2 + x[0]**4 + 6*x[0]**2*x[1] - 3*x[0]**2*x[2] + 3*x[1]**2 - 3*x[1]*x[2]
    # G27: \sum_{i,j,k,l,m,n} W_{ij} W_{jk} W_{lm} W_{ln}
    g[26] = D**4*x[2]**2/4 + D**3*x[0]**2*x[2] + D**3*x[1]*x[2] - D**3*x[2]**2 + D**2*x[0]**4 + 6*D**2*x[0]**2*x[1] - 4*D**2*x[0]**2*x[2] + 3*D**2*x[1]**2 - 4*D**2*x[1]*x[2] + 3*D**2*x[2]**2/4 - 2*D*x[0]**4 - 12*D*x[0]**2*x[1] + 5*D*x[0]**2*x[2] - 6*D*x[1]**2 + 5*D*x[1]*x[2] + D*x[2]**2 + x[0]**4 + 6*x[0]**2*x[1] - 2*x[0]**2*x[2] + 3*x[1]**2 - 2*x[1]*x[2] - x[2]**2
    # G28: \sum_{i,j,k,l,m,n} W_{ij}^2 W_{kl} W_{mn}
    g[27] = 0.5*D**4*x[0]**2*x[3] + 0.5*D**4*x[1]*x[3] + 1.0*D**3*x[0]**2*x[2] - 2.0*D**3*x[0]**2*x[3] + 1.0*D**3*x[1]*x[2] - 2.0*D**3*x[1]*x[3] + 1.0*D**2*x[0]**4 + 6.0*D**2*x[0]**2*x[1] - 2.0*D**2*x[0]**2*x[2] + 1.5*D**2*x[0]**2*x[3] + 3.0*D**2*x[1]**2 - 2.0*D**2*x[1]*x[2] + 1.5*D**2*x[1]*x[3] - 1.0*D*x[0]**4 + 4.0*D*x[0]**2*x[1]*sqrt((1 - 1/D)/D**2)*sqrt(D*(D - 1)) - 10.0*D*x[0]**2*x[1] + 1.0*D*x[0]**2*x[2] - 3.0*D*x[1]**2 + 1.0*D*x[1]*x[2] + 4.0*x[0]**2*x[1]
    # G29: \sum_{i,j,k,l,m,n} W_{ij} W_{kl} W_{lm} W_{mn}
    g[28] = D**3*x[0]**2*x[2] + D**3*x[1]*x[2] + D**2*x[0]**4 + 6*D**2*x[0]**2*x[1] - D**2*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1))/2 - 4*D**2*x[0]**2*x[2] + 3*D**2*x[1]**2 - 9*D**2*x[1]*x[2]/2 - 2*D*x[0]**4 - 12*D*x[0]**2*x[1] + D*x[0]**2*x[2]*sqrt((D - 1)/D**3)*sqrt(D*(D - 1)) + 5*D*x[0]**2*x[2] - 6*D*x[1]**2 + 13*D*x[1]*x[2]/2 + x[0]**4 + 6*x[0]**2*x[1] - 2*x[0]**2*x[2] + 3*x[1]**2 - 3*x[1]*x[2]

    # 7 vertex
    # G30: \sum_{i,j,k,l,m,n,o} W_{ij} W_{jk} W_{lm} W_{no}
    g[29] = D*(D**3*x[0]**2*x[2] + D**3*x[1]*x[2] + 2*D**2*x[0]**4 + 12*D**2*x[0]**2*x[1] - 4*D**2*x[0]**2*x[2] + 6*D**2*x[1]**2 - 4*D**2*x[1]*x[2] - 4*D*x[0]**4 - 24*D*x[0]**2*x[1] + 5*D*x[0]**2*x[2] - 12*D*x[1]**2 + 5*D*x[1]*x[2] + 2*x[0]**4 + 12*x[0]**2*x[1] - 2*x[0]**2*x[2] + 6*x[1]**2 - 2*x[1]*x[2])/2

    # 8 vertex
    # G31: \sum_{i,j,k,l,m,n,o,p} W_{ij} W_{kl} W_{mn} W_{op}
    g[30] = D**2*(D**2*x[0]**4 + 6*D**2*x[0]**2*x[1] + 3*D**2*x[1]**2 - 2*D*x[0]**4 - 12*D*x[0]**2*x[1] - 6*D*x[1]**2 + x[0]**4 + 6*x[0]**2*x[1] + 3*x[1]**2)

    return g


def convergance_check(x_couplings):
    """Checks convergance of matrix model"""
    if x_couplings[1] >= 0 and x_couplings[2] >= 0 and x_couplings[3] >= 0:
        print("\n Convergence criteria test: Successful")
    else:
        print("\n Convergence criteria test: Unsuccessful")


def normalized_ae(theoretical_val, experimental_val, experimental_disp_measure):
    """Calculates normalised abs diff of experimental and theoretical
    observable expectation values."""
    if experimental_disp_measure < 1e-10:
        return abs(theoretical_val - experimental_val)

    return abs(theoretical_val - experimental_val)/experimental_disp_measure


def print_abs_errs(G, mat_exp_cuqu, std_exp_cuqu):
    """Prints absolute errors of exp and theoretical obs exp vals."""
    for i, val in enumerate(G):
        print(
            f"G{i+1} normalised abs err: {normalized_ae(float(val), float(mat_exp_cuqu[i]), float(std_exp_cuqu[i]))}"
        )


def main():
    """Reads correlation matrices from file and calculates absolute
    error between theoretical and experimental observable vales, normalised
    by standard deviation."""

    # Calculate experimental observable values from correlation matrix data 
    D, mat_exp, mat_exp_cuqu, std_exp, std_exp_cuqu = calc_obs_vals()

    # Define model couplings from linear and quadratic observables
    x_couplings = calc_model_params(mat_exp, D)

    # Check action of model converges
    convergance_check(x_couplings)

    # Calculate theoretical cubic and quartic observable expectation values
    # predicted by model
    g = obs_theory(x_couplings, D)

    # Calculate normalised abs errors between model and experimental data
    print_abs_errs(g, mat_exp_cuqu, std_exp_cuqu)


if __name__ == "__main__":
    main()
